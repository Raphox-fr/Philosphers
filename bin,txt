# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    bin,txt                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rafaria <rafaria@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/02/06 18:14:20 by rafaria           #+#    #+#              #
#    Updated: 2025/02/28 12:11:43 by rafaria          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include"philo.h"
#include <unistd.h>


int pick_up_the_forks(t_philo *philo)
{
	if (philo->id % 2 == 0) // est pair
	{
		pthread_mutex_lock(philo->thread_r_fork);
		my_printf(philo, "has taken a right fork", 0);	
		pthread_mutex_lock(philo->thread_l_fork);
		my_printf(philo, "has taken a left fork", 0);	
	}
	else
	{
		pthread_mutex_lock(philo->thread_l_fork);
		my_printf(philo, "has taken a left fork", 0);	
		pthread_mutex_lock(philo->thread_r_fork);
		my_printf(philo, "has taken a right fork", 0);	
	
	}
	return (1);
}

int release_the_forks(t_philo *philo)
{
	if (philo->id % 2 == 0) // est pair
	{
		pthread_mutex_unlock(philo->thread_l_fork);
		pthread_mutex_unlock(philo->thread_r_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->thread_r_fork);
		pthread_mutex_unlock(philo->thread_l_fork);
	}
	return (1);
}


int is_philo_dead(t_philo *philo)
{
	pthread_mutex_lock(philo->table->thread_dead);
	if (philo->full == 1)
	{
		my_printf(philo, "WORKS (is_philo_dead) pas counter", 0);
		pthread_mutex_unlock(philo->table->thread_dead);
		return (0);
	}
	pthread_mutex_unlock(philo->table->thread_dead);
	return (1);
}

int go_eat(t_philo *philo)
{
	// pthread_mutex_lock(philo->table->thread_dead);
	// if (philo->full == 1)
	// {
	// 	my_printf(philo, "WORKS (eat) pas counter", 0);
	// 	pthread_mutex_unlock(philo->table->thread_dead);
	// 	release_the_forks(philo);
	// 	return (0);
		
	// }
	// pthread_mutex_unlock(philo->table->thread_dead);
	pick_up_the_forks(philo);
	// pthread_mutex_lock(philo->table->thread_dead);
	philo->time_last_meal = set_timer();
	philo->meal_counter = philo->meal_counter + 1; 
	// pthread_mutex_unlock(philo->table->thread_dead);
	my_printf(philo, "is eating", 0);
	usleep(philo->table->time_to_eat);
	release_the_forks(philo);
	return (1);
}

int go_sleep(t_philo *philo)
{
	// pthread_mutex_lock(philo->table->thread_dead);
	// if (philo->full == 1)
	// {
	// 	my_printf(philo, "WORKS (sleep) pas counter", 0);
	// 	pthread_mutex_unlock(philo->table->thread_dead);
	// 	return (0);
		
	// }
	usleep(philo->table->time_to_sleep);
	// pthread_mutex_unlock(philo->table->thread_dead);
	my_printf(philo, "is sleeping", 0);
	return (1);
}

int go_think(t_philo *philo)
{
	my_printf(philo, "is thinking", 0);
	return (1);
}


void *dinner_simulation(void *data)
{
	t_philo *philo;
	philo = (t_philo *)data;

	int i;
	i = 0;
	while (is_philo_dead(philo) == 1)
	{
		if (go_eat(philo) == 0)
			return NULL;
		if (go_sleep(philo) == 0)
			return NULL;
		if (go_think(philo) == 0)
			return NULL;
	}
	return (NULL);
}



void dinner_start(t_table *table)
{
	int i;
	i = 0;

	pthread_t watch;
	
	if (table->nbr_limit_meals == 0)
		return ;
	if (table->nbr_philo == 1)
		return ;
	else
	{
		table->start_dinner_time = set_timer();
		pthread_create(&watch, NULL, &watch_simulation, table);
		while (i < table->nbr_philo)
		{
			pthread_create(&table->philos[i].thread_id, NULL, dinner_simulation, &table->philos[i]);
			i++;
		}
		pthread_join(watch, NULL);
		i = 0;
		while (i < table->nbr_philo)
		{
			pthread_join(table->philos[i].thread_id, NULL);
			i++;
		}
	}
	pthread_mutex_destroy(&table->thread_printf);


}

void *watch_simulation(void *data)
{
	t_table *table;
	table = (t_table *)data;

	long i;
	i = 0;

	long pin;
	pin = 0;

	
	while (42)
	{
		while (i < table->nbr_philo)
		{
			is_philo_full(table, i);
			if (is_every_philo_full(table) == 1)
				return NULL;
			i++;
		}
		i = 0;
	}
}


int is_philo_full(t_table *table, int i)
{
	pthread_mutex_lock(table->thread_dead);
	if (table->nbr_limit_meals != -1 && table->philos[i].meal_counter >= table->nbr_limit_meals)
	{
		// my_printf(&table->philos[i],  "MEAL COUNT ATTEINT", 0);
		table->philos[i].full = 1;
		pthread_mutex_unlock(table->thread_dead);
		return (0);
	}
	pthread_mutex_unlock(table->thread_dead);
	return (0);
	
}

int is_every_philo_full(t_table *table)
{
	int i;
	i = 0;
	int count;
	count = 0;

	while (i < table->nbr_philo)
		{
			pthread_mutex_lock(table->thread_dead);
			if (table->philos[i].full == 1)
				count ++;
			if (count == table->nbr_philo)
			{
				table->end_simulation = 1;
				pthread_mutex_unlock(table->thread_dead);
				return (1);
			}
			pthread_mutex_unlock(table->thread_dead);
			i++;
		}
	return (0);
	
}

int too_much_time(t_table *table, int i)
{
	pthread_mutex_lock(table->thread_dead);
	if (table->philos[i].time_last_meal != -1)
	{
		if (((set_timer() - table->philos[i].time_last_meal) * 1000) > table->time_to_die)
		{
			table->end_simulation = 1;
			my_printf(&table->philos[i], "too much time ", 0);
			pthread_mutex_unlock(table->thread_dead);
			return (1);
		}		
	}
	pthread_mutex_unlock(table->thread_dead);
	return (0);
	
}









// if (((set_timer() - philo->time_last_meal) * 1000) > philo->table->time_to_die)
// {
// 	philo->table->end_simulation = 1;
// 	my_printf(philo, "trop much time without eating", 0);
// 	return (0);
// }




// {
// 		if (((set_timer() - philo->time_last_meal) * 1000) > philo->table->time_to_die)
// 			return(write(2, "TOO MUCH TIME\n", 14), 0);		
// 	}

// void dinner_start(t_table *table)
// {
// 	int i;
// 	i = 0;

// 	pthread_t watch;
	
// 	if (table->nbr_limit_meals == 0)
// 		return ;
// 	if (table->nbr_philo == 1)
// 		return ;
// 	else
// 	{
// 		table->start_dinner_time = set_timer();
// 	if (pthread_create(&watch, NULL, &watch_simulation, table) == 0)
// 		pthread_detach(watch);
		
// 		while (i < table->nbr_philo)
// 		{
// 			pthread_create(&table->philos[i].thread_id, NULL, dinner_simulation, &table->philos[i]);
// 			i++;
// 		}
// 		i = 0;
		
// 		if (pthread_join(watch, NULL) == 0)
// 				pthread_detach(watch);

// 		while (i < table->nbr_philo)
// 		{
			// if (pthread_join(table->philos[i].thread_id, NULL) == 0)
			// {
			// 	i = 0;
			// 	while (i < table->nbr_philo)
			// 	{
			// 		pthread_detach(table->philos[i].thread_id);
			// 		i++;
			// 	}
			// }
// 			i++;
// 		}n == table->nbr_philo - 1)
				// {

// 	}
// }

	// 	pthread_mutex_lock(philo->table->thread_dead);
	// 	if (philo->table->one_philo_dead == 1)
	// 	{
	// 		pthread_mutex_lock(philo->table->thread_printf);
	// 		my_printf(philo, "is dead");
	// 		pthread_mutex_unlock(philo->table->thread_printf);
	// 		pthread_mutex_unlock(philo->table->thread_dead);
	// 		pthread_mutex_unlock(philo->table->thread_check_meal);
	// 		return (0);
	// 	} 
	// pthread_mutex_unlock(philo->table->thread_dead);



	//GODOODODOODODODOODDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDd


// void *watch_simulation(void *data)
// {
// 	t_table *table;
// 	table = (t_table *)data;

// 	long i;
// 	i = 0;

// 	long pin;
// 	pin = 0;

// 	while (table->end_simulation != 1)
// 	{
// 		i = 0; 
// 		while (i < table->nbr_philo)
// 		{
// 			pthread_mutex_lock(table->thread_dead);
// 			if (table->philos[i].meal_counter == table->nbr_limit_meals && table->nbr_limit_meals != -1)
// 			{
// 				pin++;
// 				if (pi
// 					table->end_simulation = 1;
// 					my_printf(&table->philos[i], "END SIMULATION", 1);
// 					pthread_mutex_unlock(table->thread_dead);
// 					exit(0);
// 				}
// 			}
// 			if (table->philos[i].time_last_meal != -1 && ((set_timer() - table->philos[i].time_last_meal) * 1000) > table->time_to_die)
// 			{
// 				table->end_simulation = 1;
// 				my_printf(&table->philos[i], "too much time", 1);
// 				pthread_mutex_unlock(table->thread_dead);
// 				exit(0);
// 			}
// 			pthread_mutex_unlock(table->thread_dead);

// 			usleep(100);
// 			i++;
// 		}
// 		pin = 0;
// 	}
// 	return (NULL);
// }


// {
// 		if (((set_timer() - philo->time_last_meal) * 1000) > philo->table->time_to_die)
// 			return(write(2, "TOO MUCH TIME\n", 14), 0);		
// 	}

// void dinner_start(t_table *table)
// {
// 	int i;
// 	i = 0;

// 	pthread_t watch;
	
// 	if (table->nbr_limit_meals == 0)
// 		return ;
// 	if (table->nbr_philo == 1)
// 		return ;
// 	else
// 	{
// 		table->start_dinner_time = set_timer();
// 	if (pthread_create(&watch, NULL, &watch_simulation, table) == 0)
// 		pthread_detach(watch);
		
// 		while (i < table->nbr_philo)
// 		{
// 			pthread_create(&table->philos[i].thread_id, NULL, dinner_simulation, &table->philos[i]);
// 			i++;
// 		}
// 		i = 0;
		
// 		if (pthread_join(watch, NULL) == 0)
// 				pthread_detach(watch);

// 		while (i < table->nbr_philo)
// 		{
			// if (pthread_join(table->philos[i].thread_id, NULL) == 0)
			// {
			// 	i = 0;
			// 	while (i < table->nbr_philo)
			// 	{
			// 		pthread_detach(table->philos[i].thread_id);
			// 		i++;
			// 	}
			// }
// 			i++;
// 		}n == table->nbr_philo - 1)
				// {

// 	}
// }

	// 	pthread_mutex_lock(philo->table->thread_dead);
	// 	if (philo->table->one_philo_dead == 1)
	// 	{
	// 		pthread_mutex_lock(philo->table->thread_printf);
	// 		my_printf(philo, "is dead");
	// 		pthread_mutex_unlock(philo->table->thread_printf);
	// 		pthread_mutex_unlock(philo->table->thread_dead);
	// 		pthread_mutex_unlock(philo->table->thread_check_meal);
	// 		return (0);
	// 	} 
	// pthread_mutex_unlock(philo->table->thread_dead);